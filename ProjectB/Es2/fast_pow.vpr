predicate time_credit()
method consume_time_credit()
    requires time_credit()

function math_pow(n: Int, e: Int): Int
    requires 0 <= e
{
    e == 0 ? 1 : n * math_pow(n, e - 1)
}

function log(n : Int) : Int
    requires 0 < n
    ensures 0 <= result
    ensures math_pow(2, result) <= n < math_pow(2, result + 1)
{
    n == 1 ? 0 : 1 + log(n / 2)
}

method lemma_pow(b: Int, y: Int)
    requires 0 <= y
    requires y % 2 == 0
    ensures math_pow(b, y) == math_pow(b * b, y / 2)

// Add time credit annotations to the following method.
//
// Remember to insert consume_time_credit() calls according to the background
// section in the project assignment.
//
// You may define additional functions or lemma methods, you may add ghost
// variables and arguments, and you may augment the method body as you see fit.
// Make sure the functional contract remains intact!
method fast_pow(n: Int, e: Int)
    returns (res: Int)
    requires 0 < e
    requires acc(time_credit(), (log(e) + 2)/1)
    ensures res == math_pow(n, e)
{
    consume_time_credit()

    var b: Int
    var y: Int

    res := 1
    b := n
    y := e
    var count : Int := 0
    while (y > 0)
        invariant 0 <= y
        invariant y > 0 ==> acc(time_credit(), (log(y) + 1)/1)
        invariant res * math_pow(b, y) == math_pow(n, e)
    {
        consume_time_credit()
        if (y % 2 == 1) {
            lemma_pow(b, y - 1)
            res := res * b
        } else {
            lemma_pow(b, y)
        }
        y := y / 2
        b := b * b
        count := count + 1
    }
}