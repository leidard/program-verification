predicate time_credit()
method consume_time_credit()
    requires time_credit()

function math_fib(n: Int): Int
    requires 0 <= n
    ensures 0 <= result
{
    n <= 1 ? n : (math_fib(n - 1) + math_fib(n - 2))
}

function leo_numbers(n : Int) : Int
    requires 0 <= n
    ensures 0 <= result
{
    n <= 1 ? 1 : (leo_numbers(n - 1) + leo_numbers(n - 2) + 1)
}

function pow(base : Int, exponent : Int) : Int
    requires 0 < base && 0 <= exponent
    ensures 0 < result
{
    exponent == 0 ? 1 : (base * pow(base, exponent - 1))
}

// Add time credit annotations to the following method.
//
// Remember to insert consume_time_credit() calls according to the background
// section in the project assignment.
//
// You may define additional functions or lemma methods, you may add ghost
// variables and arguments, and you may augment the method body as you see fit.
// Make sure the functional contract remains intact!
method fib_recursive(n: Int)
    returns (res: Int)
    requires n >= 0
    //requires acc(time_credit(), leo_numbers(n)/1)
    requires acc(time_credit(), (pow(2, n)/1))
    ensures res == math_fib(n)
{
    consume_time_credit()

    if (n == 0) {
        res := 0
    } elseif (n == 1) {
        res := 1
    } else {
        var sub1: Int
        sub1 := fib_recursive(n - 1)

        var sub2: Int
        sub2 := fib_recursive(n - 2)

        res := sub1 + sub2
    }
}