// The generated lexer module will start with this code
{
open FSharp.Text.Lexing
open System
// open the module that defines the tokens
open Parser
open ErrorInfo
// Set the language to English such that 4.0 is parsed as 4 and not 40.
System.Globalization.CultureInfo.CurrentCulture <- new System.Globalization.CultureInfo("en-US")
}

// We define macros for some regular expressions we will use later
let digit       = ['0'-'9']
let num         = digit+ ( '.' digit+)?  ('E' ('+'|'-')? digit+ )?
let ident       = ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r' | "\r\n"
let comment     = "//" [^'\n']* newline

// We define now the rules for recognising and building tokens
// for each of the tokens of our language we need a rule
// NOTE: rules are applied in order top-down.
//       This is important when tokens overlap (not in this example)
rule tokenize = parse
// deal with tokens that need to be ignored (skip them)
| whitespace    { tokenize lexbuf }
| "//"          { lineComment lexbuf }
| "/*"          { multilineComment false lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
// deal with tokens that need to be built
| num           { NUM(LexBuffer<_>.LexemeString lexbuf) }
| "-"           { MINUS }
| ","           { COMMA }
| "::"          { DOUBLECOLON }
| ":"           { COLON }
| ":="          { COLONEQ }
| "!"           { NOT }
| "!="          { NEQ }
| "("           { LPAR }
| ")"           { RPAR }
| "{"           { LCUR }
| "}"           { RCUR }
| "*"           { TIMES }
| "/"           { DIV }
| "&&"          { AND }
| "+"           { PLUS }
| "<"           { LT }
| "<="          { LEQ }
| "=="          { EQ }
| "==>"         { IMP }
| ">"           { GT }
| ">="          { GEQ }
| "||"          { OR }
| "assert"      { ASSERT }
| "assume"      { ASSUME }
| "Bool"        { BOOL }
| "decreases"   { DECREASES }
| "else"        { ELSE }
| "ensures"     { ENSURES }
| "exists"      { EXISTS }
| "false"       { FALSE }
| "forall"      { FORALL }
| "function"    { FUNCTION }
| "if"          { IF }
| "Int"         { INT }
| "invariant"   { INVARIANT }
| "method"      { METHOD }
| "requires"    { REQUIRES }
| "result"      { RESULT }
| "returns"     { RETURNS }
| "true"        { TRUE }
| "var"         { VAR }
| "while"       { WHILE }
| ident         { IDENT(LexBuffer<_>.LexemeString lexbuf) }
| eof           { EOF }

and multilineComment hasStar = parse
| "*"           { multilineComment true lexbuf }
| "/"           { if hasStar then tokenize lexbuf else multilineComment false lexbuf }
| [^ '*' '/']   { multilineComment false lexbuf }

and lineComment = parse
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
| [^'\n' '\r']  { lineComment lexbuf }
| eof           { EOF }
